generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  password   String
  email      String    @unique
  isClient   Boolean   @default(false)
  Client     Client?   @relation(fields: [clientId], references: [id])
  clientId   Int?
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  isActive   Boolean   @default(true)
}

model Client {
  id              Int               @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String            @unique
  photo           String            @db.LongText
  adresse         String
  numero          String
  createdAt       DateTime          @default(now())
  reclamation     Reclamation[]
  orderReparation OrderReparation[]
  user            User[]
  entreeDevice    EntreeDevice[]
  order           Order[]
}

model Employee {
  id              Int               @id @default(autoincrement())
  first_name      String
  last_name       String
  adresse         String
  numero          String
  photo           String            @db.LongText
  email           String            @unique
  role            Role              @default(technicien)
  isArchived      Boolean           @default(false)
  user            User[]
  etape           Etape[]
  orderreparation OrderReparation[]
}

model Reclamation {
  id          Int               @id @default(autoincrement())
  image       String?           @db.LongText
  titel       String
  description String
  createdAt   DateTime          @default(now())
  Client      Client?           @relation(fields: [clientId], references: [id])
  clientId    Int?
  fiche       OrderReparation[]
  Entrees     EntreeDevice[]
}

model EntreeDevice {
  id            Int               @id @default(autoincrement())
  title         String
  image         String?           @db.LongText
  description   String
  createdAt     DateTime          @default(now())
  Client        Client?           @relation(fields: [clientId], references: [id])
  clientId      Int?
  etapeId       Int?
  Orders        OrderReparation[]
  Reclamation   Reclamation?      @relation(fields: [reclamationId], references: [id])
  reclamationId Int?
}

model OrderReparation {
  id             Int                 @id @default(autoincrement())
  title          String
  description    String
  status         Status
  date           DateTime?
  Client         Client?             @relation(fields: [clientId], references: [id])
  clientId       Int?
  Reclamation    Reclamation?        @relation(fields: [reclamationId], references: [id])
  reclamationId  Int?
  EntreeDevice   EntreeDevice?       @relation(fields: [entreeDeviceId], references: [id])
  entreeDeviceId Int?
  etape          Etape[]
  order          Order[]
  fiches         FicheIntervention[]
  Employee       Employee?           @relation(fields: [employeeId], references: [id])
  employeeId     Int?
}

model FicheIntervention {
  id                Int                        @id @default(autoincrement())
  OrderReparation   OrderReparation            @relation(fields: [orderReparationId], references: [id])
  orderReparationId Int
  details           FicheInterventionDetails[]
  status            StatusFiche                @default(inProgress)
}

model FicheInterventionDetails {
  id                  Int                @id @default(autoincrement())
  title               String
  rapport             String
  description         String
  FicheIntervention   FicheIntervention? @relation(fields: [ficheInterventionId], references: [id])
  ficheInterventionId Int?
}

model Etape {
  id                Int              @id @default(autoincrement())
  title             String
  rapport           String
  description       String
  status            Status
  type              String
  date              DateTime
  createdAt         DateTime         @default(now())
  Employee          Employee?        @relation(fields: [employeeId], references: [id])
  employeeId        Int?
  OrderReparation   OrderReparation? @relation(fields: [orderReparationId], references: [id])
  orderReparationId Int?
}

model Order {
  id                Int              @id @default(autoincrement())
  currency          String? // Devise utilisée ('$' dans votre exemple)
  currentDate       DateTime? // Date actuelle
  invoiceNumber     Int? // Numéro de facture
  dateOfIssue       DateTime? // Date d'émission
  notes             String? // Notes
  total             Float? // Total
  subTotal          Float? // Sous-total
  taxRate           Float? // Taux de taxe
  taxAmount         Float? // Montant de taxe
  discountRate      Float? // Taux de réduction
  discountAmount    Float? // Montant de réduction
  createdAt         DateTime         @default(now())
  confirm           Boolean          @default(false)
  orderline         Orderline[]
  Client            Client?          @relation(fields: [clientId], references: [id])
  clientId          Int?
  orderReparation   OrderReparation? @relation(fields: [orderReparationId], references: [id])
  orderReparationId Int?
}

model Orderline {
  id            Int    @id @default(autoincrement())
  item          String
  prix_unitaire Float
  qunatity      Int
  Order         Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       Int
}

enum Role {
  technicien
  admin
  manager
  receptionist
}

enum Status {
  inProgress
  completed
  pending
  onhold
}

enum StatusFiche {
  inProgress
  toFactured
  closed
}
